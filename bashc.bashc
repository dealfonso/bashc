#!/bin/bash
function usage() {
  cat <<EOF

This is a tool that tries to flatten bash applications. It is useful if you use source statements
  to organize your files. In this case, this tool will make a single file with no outern dependencies.
  The sourced files are searched in the folders that are included in the BASHC_LIB_PATH configuration
  variable. It is expressed in a PATH-like syntax. The value for BASHC_LIB_PATH is obtained from the 
  env variables and later from the configuration files. The default value is '.'

  The application also includes one tool to try to remove unused functions (strip-functions). This
  is useful to create libraries with a lot of funcions in it, but only include those that are used in
  the resulting application.

$0 <options> <script> -- <parameters>
  <script>                  Script to build.
  <parameters>              Parameters to pass to the resulting script (if has to be executed)
  --compile|-c              Compiles the script and outputs to the file (or the stdout if not provided
                            any output file).                           
  --output|-o <file>        File in which the resulting compilation (i.e. output of -c) will be left. If
                            not stated any file, will output to the stdout (i.e. -)
  --include|-I <path>       Use the following path-like expressions to find the files that are sourced
                            in the code. That path will be included at the end of the BASHC_LIB_PATH path.
  --chdir-to-file|-C        Changes the working directory to the one in which the file is
                            (in case that the file is in other folder)
  --skipmissing|-s          Skips the files that could not be found when detecting the command
                            source. Otherwise the app will stop if cannot find the file to include
  --include-once|-O         The app will try to detect the "source" statements only once. Take
                            into account that if one sourced file also includes a "source" statement,
                            using this mode it will not be sourced.
  --gzip-version|-G         Create a compressed version for the script (using gzip).
  --strip-functions|-S      Try to remove the unused functions (useful to create minimal commands)
  --remove-blank-lines|-R   Try to remove the blank lines in the resulting code (useful to reduce the size of
                            the resulting code while maintaining readability)
  --version | -V            Outputs the version number and finalizes.
  --verbose | -v            Shows more information about the procedure.
  --debug                   Shows a lot more information about the procedure.
  --help | -h               Shows this help and exits.
  
EOF
}

function verify_dependencies() {
  local APPS="$@"
  local APP
  for APP in $APPS; do
    help $APP > /dev/null 2> /dev/null || which $APP > /dev/null 2> /dev/null || bashc.finalize 1 "command $APP not found"
  done
}

if ! which envsubst > /dev/null 2>&1; then
    function envsubst() {
        local line
        while read line; do
            line=$( echo $line | sed 's/"/\\"/g' )
            eval echo $line
        done
    }
fi  

verify_dependencies tar sed awk gzip gunzip base64

function remove_blank_lines() {
  local RESTOFCODE='
    /^[\t ]*$/ {
      if (!in_dquote && !in_squote && in_heredoc == "") {
        next;
      }
    }
    {
      analized_str=$0;
      
      if (in_heredoc!="")
        if (analized_str ~ "^" in_heredoc "[[:blank:]]*$") {
          in_heredoc=""
          # print as-is
          print $0
          # Jump the matched delimiter
          next
        }

      # if in double quote, remove anything up othe double quote
      if (in_dquote==1)
        if (sub(/^[^"\\]*(\\.[^"\\]*)*"/,"", analized_str)) in_dquote=0;

      # if in single quote, remove anything up the single quote
      if (in_squote==1)
        if (sub(/^[^'"'"']*'"'"'/,"", analized_str)) in_squote=0;

      # if still in double quote or single quote, skip
      if (in_dquote || in_squote || in_heredoc != "") {
        print $0
        next;
      }

      # Remove regex
      sub(/\[\[:[a-zA-Z]*:\]\]/, "", analized_str);
      while (sub(/\[\[ ([^\[]|\[[^\[])* \]\]/, "[[ ]]", analized_str));

      gsub(/\\./,"", analized_str);

      # Remove quoted sentences
      while (sub(/"[^"\\]*(\\.[^"\\]*)*"|'"'"'[^'"'"']*'"'"'/,"",analized_str));

      i_comment=index(analized_str, "#");
      i_squote=index(analized_str, "'"'"'");
      i_dquote=index(analized_str, "\"");

      if (i_comment == 0) i_comment=length(analized_str);
      if (i_squote == 0) i_squote=length(analized_str);
      if (i_dquote == 0) i_dquote=length(analized_str);

      # Remove variable expressions (e.g. ${VAR}, ${#VAR[@]}, etc.)
      sub(/\$\{[^\}\{]*\}/,"", analized_str)

      if (i_comment <= i_squote && i_comment <= i_dquote) {
        # Remove comments (beware of the {#arr[@]} bash expansion)
        sub(/#.*$/,"",analized_str);
      }

      if (i_squote <= i_dquote) {
        if (sub(/'"'"'[^'"'"']*$/,"", analized_str)) 
          in_squote=1;
        if (sub(/"[^"\\]*(\\.[^"\\]*)*$/,"", analized_str))
          in_dquote=1;
      } else {
        if (sub(/"[^"\\]*(\\.[^"\\]*)*$/,"", analized_str))
          in_dquote=1;
        if (sub(/'"'"'[^'"'"']*$/,"", analized_str)) 
          in_squote=1;
      }

      if (match(analized_str, /<<[[:blank:]]*[-\\]{0,1}[A-Za-z0-9]+/)) {
        in_heredoc=substr(analized_str, RSTART, RLENGTH)
        sub(/<<[[:blank:]]*[-\\]{0,1}/,"",in_heredoc);
        sub(/<<[[:blank:]]*[-\\]{0,1}[A-Za-z0-9]+.*$/,"", analized_str);
      }

      # If we had more closing braces, it is a bug in the original file
      print $0
      next;
    }
  '
  echo "$1" | awk "
    BEGIN {
      in_squote=0;
      in_dquote=0;
    }
    $RESTOFCODE
  "
}

function getfunctions_fnc() {
  echo "$1" | awk '
    /^[ \t]*function ([^{(]+).*{.*/{
      fncname=$0
      sub(/^[ \t]*function /,"", fncname)
      match(fncname, /^[^{(]+/)
      fncname=substr(fncname, RSTART, RLENGTH)
      print fncname
    }
  ' 
}

function strip_fnc() {
  RESTOFCODE='
    infunction {
      analized_str=$0;
      
      if (in_heredoc!="")
        if (analized_str ~ "^" in_heredoc "[[:blank:]]*$") {
          in_heredoc=""
          # Jump the matched delimiter
          next
        }

      # if in double quote, remote anything up othe double quote
      if (in_dquote==1)
        if (sub(/^[^"\\]*(\\.[^"\\]*)*"/,"", analized_str)) in_dquote=0;

      # if in single quote, remote anything up the single quote
      if (in_squote==1)
        if (sub(/^[^'"'"']*'"'"'/,"", analized_str)) in_squote=0;

      # if still in double quote or single quote, skip
      if (in_dquote || in_squote || in_heredoc != "") next;

      # Remove regex
      sub(/\[\[:[a-zA-Z]*:\]\]/, "", analized_str);
      while (sub(/\[\[ ([^\[]|\[[^\[])* \]\]/, "[[ ]]", analized_str));

      gsub(/\\./,"", analized_str);

      # Remove quoted sentences
      while (sub(/"[^"\\]*(\\.[^"\\]*)*"|'"'"'[^'"'"']*'"'"'/,"",analized_str));

      i_comment=index(analized_str, "#");
      i_squote=index(analized_str, "'"'"'");
      i_dquote=index(analized_str, "\"");

      if (i_comment == 0) i_comment=length(analized_str);
      if (i_squote == 0) i_squote=length(analized_str);
      if (i_dquote == 0) i_dquote=length(analized_str);

      # Remove variable expressions (e.g. ${VAR}, ${#VAR[@]}, etc.)
      sub(/\$\{[^\}\{]*\}/,"", analized_str)

      if (i_comment <= i_squote && i_comment <= i_dquote) {
        # Remove comments (beware of the {#arr[@]} bash expansion)
        sub(/#.*$/,"",analized_str);
      }

      if (i_squote <= i_dquote) {
        if (sub(/'"'"'[^'"'"']*$/,"", analized_str)) 
          in_squote=1;
        if (sub(/"[^"\\]*(\\.[^"\\]*)*$/,"", analized_str))
          in_dquote=1;
      } else {
        if (sub(/"[^"\\]*(\\.[^"\\]*)*$/,"", analized_str))
          in_dquote=1;
        if (sub(/'"'"'[^'"'"']*$/,"", analized_str)) 
          in_squote=1;
      }

      if (match(analized_str, /<<[[:blank:]]*[-\\]{0,1}[A-Za-z0-9]+/)) {
        in_heredoc=substr(analized_str, RSTART, RLENGTH)
        sub(/<<[[:blank:]]*[-\\]{0,1}/,"",in_heredoc);
        sub(/<<[[:blank:]]*[-\\]{0,1}[A-Za-z0-9]+.*$/,"", analized_str);
      }

      # If it is empty, skip
      if (match(analized_str,/^[ \t]*$/)) next;

      # Count number of { and } in line
      b += split(analized_str, tmp, "{");
      b -= split(analized_str, tmp, "}");

      # If there are no more braces, we have finished
      if (b<=0) infunction = 0;

      # If we had more closing braces, it is a bug in the original file
      next;
    }
  '
  local FNC_NAME="$(bashc.sanitize "$1")"

  echo "$2" | awk "
    /^[ \t]*function [ \t]*$FNC_NAME[ \t\({].*/{
      infunction=1;
      b=0; # The factor between open / close brackets
      in_squote=0;
      in_dquote=0;
    }
    $RESTOFCODE
    1 # Print line"
}

function remove_unused_functions() {
  local REMOVED CURRENT_CONTENT STRIPPED_CONTENT FOUND_CONTENT
  CURRENT_CONTENT="$1"
  local FUNCTIONS="$(getfunctions_fnc "$CURRENT_CONTENT" | tr '\n' ' ')"
  p_debug "functions: 
  $FUNCTIONS"

  local i=0
  for f in $FUNCTIONS; do
    STRIPPED_CONTENT="$(strip_fnc "$f" "$CURRENT_CONTENT")"
    FOUND_CONTENT="$(echo "$STRIPPED_CONTENT" | grep "\b$f\b")"
    if [ "$FOUND_CONTENT" == "" ]; then
      p_debug "removing function '$f'"
      CURRENT_CONTENT="$STRIPPED_CONTENT"
      REMOVED=true
    else
      p_debug "keeping function '$f'"
    fi
: <<COMMENT
    p_debug "$i -----------------------------------------------------------"
    p_debug "$CURRENT_CONTENT"
    p_debug "$STRIPPED_CONTENT"
    p_debug "$i ==========================================================="
COMMENT
    i=$((i+1))
  done
  echo "$CURRENT_CONTENT"
  if [ "$REMOVED" == "true" ]; then
    return 1
  fi
  return 0
}

TMPDIR=
OUTFILE=
FILETOJOIN=
WORKINGFOLDER=.
PARAMS=()
n=0
DEBUG=
EXECUTE=true
ONLYONCE=false
SKIPMISSING=false
STRIPFUNCTIONS=false

# Some basic includes
# These includes 
source lib/debug.bashc
source lib/temp.bashc
source lib/utils.bashc
source lib/config.bashc
source lib/parameters.bashc
source version

# Parse the commandline into an array
bashc.parameter_parse_commandline "$@"

# Prepare the default lib path (i.e. find files in the current folder)
BASHC_LIB_PATH=${BASHC_LIB_PATH:-"."}

bashc.parameters_start
while bashc.parameters_next; do
  PARAM="$(bashc.parameters_current)"
  case "$PARAM" in
    --gzip-version|-G)      COMPRESSEDVERSION=true;;
    --include|-I)           bashc.parameters_next
                            BASHC_LIB_PATH_ADD="$(bashc.parameters_current)";;
    --folder|-f)            bashc.parameters_next
                            WORKINGFOLDER="$(bashc.parameters_current)";;
    --chdir-to-file-folder|-C)     
                            CHDIRTOFILE=true;;
    --output|-o)            bashc.parameters_next
                            OUTFILE="$(bashc.parameters_current)";;
    --compile|-c)           EXECUTE=false;;
    --skipmissing|-s)       SKIPMISSING=true;;
    --include-once|-O)      ONLYONCE=true;;
    --verbose|-v)           VERBOSE=true;;
    --debug)                DEBUG=true;;
    --help | -h)            usage && bashc.finalize;;
    --strip-functions | -S) STRIPFUNCTIONS=true;;
    --remove-blank-lines | -R)
                            REMOVEBLANKLINES=true;;
    --version|-V)           p_out "$VERSION"
                            bashc.finalize 0;;
    --|*)                   [ "$PARAM" == "--" ] && bashc.parameters_next
                            while ! bashc.parameters_end; do
                              PARAM="$(bashc.parameters_current)"
                              if [ "$FILETOJOIN" == "" ]; then
                                FILETOJOIN="$PARAM"
                              else
                                if [ "$EXECUTE" != "false" ]; then
                                  PARAMS+=("$PARAM")
                                else
                                  usage && bashc.finalize 1 "invalid parameter $PARAM"
                                fi
                              fi                      
                              if [ "$EXECUTE" == "false" ]; then
                                break
                              fi
                              bashc.parameters_next     
                            done;;
  esac
  n=$(($n+1))
done

CONFIGFILES="/etc/default/bashc.conf /etc/bashc/bashc.conf /etc/bashc.conf $HOME/.bashc/bashc.conf etc/bashc.conf"

if [ "$FILETOJOIN" == "" ]; then
  bashc.finalize 0 "no input file provided"
fi

if [ "$OUTFILE" == "-" ]; then
  OUTFILE=""
fi

# Change to the working folder (get it from the file, if flag -C is set)
if [ "$CHDIRTOFILE" == "true" ]; then
  WORKINGFOLDER="$(dirname "$FILETOJOIN")"
  FILETOJOIN="$(basename "$FILETOJOIN")"
fi

cd "$WORKINGFOLDER" || bashc.finalize 1 "not valid working folder $WORKINGFOLDER"

bashc.readconffiles "$CONFIGFILES" BASHC_LIB_PATH

# Append the paths in the parameters
if [ "$BASHC_LIB_PATH_ADD" != "" ]; then
  BASHC_LIB_PATH="$BASHC_LIB_PATH:$BASHC_LIB_PATH_ADD"
fi

p_info "BASHC_LIB_PATH=$BASHC_LIB_PATH"

# Prepare the lib path to be easier to use (add the folder . as a default)
BASHC_LIB_PATH="$(echo -e "${BASHC_LIB_PATH//\:/\\n}")"
# Q: Not sure if adding the current folder to the search path.
# A: No. Just because how PATH variable works.
# BASHC_LIB_PATH="$(echo -e ".\\n${BASHC_LIB_PATH//\:/\\n}")"

# Prepare
_FILES_INCLUDED=()
_TMPFILE1="$(bashc.tempfile)"
cp "$FILETOJOIN" "$_TMPFILE1"
HAVEWORK=true

# Will have work while some "source" statements are detected
while [ "$HAVEWORK" == "true" ]; do
  _NXT_SRC="$(cat "$_TMPFILE1" | sed 's/#.*//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g' | sed '/^$/d' | grep '^source ' | head -n 1)"
  if [ "$_NXT_SRC" != "" ]; then
    _TMPFILE2=$(bashc.tempfile)
    _SRC_FILE="$(bashc.trim "${_NXT_SRC:7}")"

    FOUND=false
    for F in $BASHC_LIB_PATH; do
      if [ "$F" != "" -a -e "$F/$_SRC_FILE" ]; then
        p_info "found file $_SRC_FILE in folder $F"
        _SRC_FILE="$F/$_SRC_FILE"
        FOUND=true
        break
      fi
    done

    if [ "$FOUND" == "true" ]; then
      SOLVEINCLUDE=true
      FILEINCLUDED="$(echo "${_FILES_INCLUDED[@]}" | grep "$_SRC_FILE")"
      if [ "$FILEINCLUDED" != "" ]; then
        if [ "$ONLYONCE" == "true" ]; then
          p_warning "file $_SRC_FILE has already been included"
          SOLVEINCLUDE=false
        fi
      fi
      if [ "$SOLVEINCLUDE" == "true" ]; then
        p_debug "including file $_SRC_FILE"
        _REXP='^[ \t]*'"$(bashc.sanitize "$_NXT_SRC")"'[ \t]*$'
        awk "
        BEGIN { 
          appeared=0;
          while ((getline<\"$_TMPFILE1\")==1) {
            if (!appeared && \$0 ~ /$_REXP/) {
              appeared=1;
              while ((getline<\"$_SRC_FILE\")==1) print;
              close(\"$_SRC_FILE\")
            } else
              print;
          }
          close(\"$_TMPFILE1\")
        }" > "$_TMPFILE2"
        _FILES_INCLUDED+=("$_SRC_FILE")
      else
        p_debug "skipping file $_SRC_FILE"
        cat "$_TMPFILE1" | sed "s/^\\($(bashc.sanitize "$_NXT_SRC")\\)\$/# Already included: \\1/" > "$_TMPFILE2"
      fi
    else
      p_warning "could not find file $_SRC_FILE. If it should be found, please adjust your BASHC_LIB_PATH variable in configuration"
      if [ "$SKIPMISSING" == "true" ]; then
        cat "$_TMPFILE1" | sed "s/^\\($(bashc.sanitize "$_NXT_SRC")\\)\$/# Missing file: \\1/" > "$_TMPFILE2"
      else
        bashc.finalize 1 "could not find file $_SRC_FILE"
      fi
    fi
    mv "$_TMPFILE2" "$_TMPFILE1"
  else
    HAVEWORK=false
  fi
done

# Now let's strip the functions
if [ "$STRIPFUNCTIONS" == "true" ]; then
  p_info "stripping unused functions"
  F_CONTENT="$(cat "$_TMPFILE1")"
  REPEAT=true

  while [ "$REPEAT" == "true" ]; do
    F_CONTENT="$(remove_unused_functions "$F_CONTENT")"
    if [ $? -eq 0 ]; then
      REPEAT=false
      p_debug "no more changes"
    fi
  done

  echo "$F_CONTENT" > "$_TMPFILE1"
fi

if [ "$REMOVEBLANKLINES" == "true" ]; then
  p_info "stripping unused functions"
  F_CONTENT="$(cat "$_TMPFILE1")"
  remove_blank_lines "$F_CONTENT" > "$_TMPFILE1"
fi

if [ "$COMPRESSEDVERSION" == "true" ]; then
  _TMPFILE2=$(bashc.tempfile)
  COMPRESSEDCONTENT="$(cat "$_TMPFILE1" | gzip | base64)"
  cat > "$_TMPFILE2" <<EOT
#!/bin/bash
COMPRESSEDCONTENT="$COMPRESSEDCONTENT"
eval "\$(echo "\$COMPRESSEDCONTENT" | base64 -d | gunzip)"
EOT
  mv "$_TMPFILE2" "$_TMPFILE1"
fi

if [ "$OUTFILE" != "" ]; then
  mv "$_TMPFILE1" "$OUTFILE"
  chmod +x "$OUTFILE"
else
  if [ "$EXECUTE" == "true" ]; then
    OUTFILE="$_TMPFILE1"
  else
    cat "$_TMPFILE1"
  fi
fi

if [ "$EXECUTE" == "true" ]; then
  p_info "executing the resulting app with params ${PARAMS[@]}"
  bash -- "$OUTFILE" "${PARAMS[@]}"
fi

if [ -e "$_TMPFILE1" ]; then
  p_debug "removing temporary file"
  rm -f "$_TMPFILE1" > /dev/null 2> /dev/null
fi

p_debug "returning to the previous folder"
cd - > /dev/null
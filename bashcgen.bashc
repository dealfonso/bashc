#!/bin/bash
#
# bashcgen - creates a basic bashc application based on a template
# https://github.com/
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function usage() {
  cat <<EOF

This tool creates a template for an application

$0 <appname>
  --only-main-app | -M      Copy only the executable files in the main folder from the
                            template (in that case, the default folder is "."). Mainly 
                            created to generate new scripts for the current application.
  --overwrite | -o          Overwrite files without prompting
  --list-templates | -l     List the templates that are available for bashcgen and finalize.
  --folder | -f <folder>    Sets the folder in which the template is being created
                            (default: ./appname)
  --template | -t <name>    Makes use of the template named <name> (default: bash)
  --version | -V            Shows the version number and finalizes.
  --verbose | -v            Shows more information about the procedure.
  --debug                   Shows a lot more information about the procedure.
  --help | -h               Shows this help and exits.
EOF
}

function verify_dependencies() {
  return 0
}

# Some basic includes
source debug.bashc
source temp.bashc
source utils.bashc
source config.bashc
source parameters.bashc
source version

# Parse the commandline into an array
bashc.parameter_parse_commandline "$@"

FOLDER=
APPNAME=
TEMPLATE=bash
bashc.parameters_start
while bashc.parameters_next; do
  PARAM="$(bashc.parameters_current)"
  case "$PARAM" in
    --only-main-app|-M)     MAINAPPONLY=true;;
    --overwrite|-o)         OVERWRITE=true;;
    --list-templates|-l)    LISTTEMPLATES=true;;
    --template|-t)          bashc.parameters_next
                            TEMPLATE="$(bashc.parameters_current)";;
    --folder|-f)            bashc.parameters_next
                            FOLDER="$(bashc.parameters_current)";;
    --verbose|-v)           VERBOSE=true;;
    --debug)                DEBUG=true;;
    --help | -h)            usage && bashc.finalize;;
    --version|-V)           p_out "$VERSION"
                            bashc.finalize 0;;
    *)                      if [ "$APPNAME" == "" ]; then
                              APPNAME="$PARAM"
                            else
                              usage && bashc.finalize 1 "invalid parameter $PARAM"
                            fi;;
  esac
done

verify_dependencies

CONFIGFILES="/etc/default/bashcgen.conf /etc/bashc/bashcgen.conf /etc/bashcgen.conf $HOME/.bashc/bashcgen.conf etc/bashcgen.conf"

bashc.readconffiles "$CONFIGFILES" BASHCGEN_TEMPLATE_PATH

if [ ! -d "$BASHCGEN_TEMPLATE_PATH" ]; then
  bashc.finalize 1 "the template folder is not valid"
fi

BASHCGEN_TEMPLATE_PATH="${BASHCGEN_TEMPLATE_PATH%/}"
TEMPLATES_S="$(while read; do echo "${REPLY//*\//}"; done <<< "$(find "${BASHCGEN_TEMPLATE_PATH}" -maxdepth 1 -mindepth 1 -type d )")"

if [ "$LISTTEMPLATES" == "true" ]; then
  p_out "Templates available:"
  for T in $TEMPLATES_S; do
    p_out "$T"
  done
  bashc.finalize 0
fi

TEMPLATES=()
bashc.lines_to_array TEMPLATES "$TEMPLATES_S"

if [ "$APPNAME" == "" ]; then
  bashc.finalize 1 "no appname set"
fi

if [[ ! "$APPNAME" =~ ^[A-Za-z0-9]*$ ]]; then
  bashc.finalize 1 "the name $APPNAME is not a valid name for an application"
fi

if ! bashc.in_list TEMPLATES "$TEMPLATE"; then
  bashc.finalize 1 "template $TEMPLATE does not exist"
fi

FOLDEROVERWRITE="$OVERWRITE"

if [ "$MAINAPPONLY" == "true" ]; then
  if [ "$FOLDER" == "" ]; then
    FOLDER="."
    FOLDEROVERWRITE="true"
  fi
fi

if [ "$FOLDER" == "" ]; then
  FOLDER="./$APPNAME"
fi

if [ -d "$FOLDER" -a "$FOLDEROVERWRITE" != "true" ]; then
  bashc.finalize 1 "folder $FOLDER already exists"
fi

p_debug "creating app $APPNAME in folder $FOLDER"
TEMPLATE_FOLDER="$BASHCGEN_TEMPLATE_PATH/$TEMPLATE"
if [ "$MAINAPPONLY" == "true" ]; then
  FILES="$(while read; do echo "${REPLY:${#TEMPLATE_FOLDER}}"; done <<< "$(find "${TEMPLATE_FOLDER}" -mindepth 1 -maxdepth 1 -type f -executable 2> /dev/null)")"
else
  FILES="$(while read; do echo "${REPLY:${#TEMPLATE_FOLDER}}"; done <<< "$(find "${TEMPLATE_FOLDER}" -mindepth 1 2> /dev/null)")"
fi

if [ "$FILES" == "" ]; then
  bashc.finalize 1 "error finding files in the template"
fi

mkdir -p "$FOLDER"
for F in $FILES; do
  INAPPNAME="${F//APPNAME/$APPNAME}"
  p_debug "creating file $INAPPNAME"
  if [ -d "$BASHCGEN_TEMPLATE_PATH/$TEMPLATE/$F" ]; then
    mkdir -p $FOLDER/$INAPPNAME
  else
    Q_OVERWRITE=
    if [ -e "$FOLDER/$INAPPNAME" ]; then
      p_warning "file $FOLDER/$INAPPNAME already exists"
      if [ "$OVERWRITE" != "true" ]; then
        read -p "Overwrite existing file $FOLDER/$INAPPNAME? (y/N/always) " Q_OVERWRITE
        if [ "$Q_OVERWRITE" == "always" ]; then
          OVERWRITE="true"
          Q_OVERWRITE="y"
        fi
        if [ "$Q_OVERWRITE" != "y" ]; then
          p_error "Not overwritting existing file $FOLDER/$INAPPNAME"
        fi
      else
        Q_OVERWRITE="y"
      fi
    else
      Q_OVERWRITE="y"
    fi

    if [ "$Q_OVERWRITE" == "y" ]; then
      cp "$BASHCGEN_TEMPLATE_PATH/$TEMPLATE/$F" "$FOLDER/$INAPPNAME"
      sed -i .toremove "s/<<APPNAME>>/$APPNAME/g" "$FOLDER/$INAPPNAME"
      rm "$FOLDER/${INAPPNAME}.toremove"
    fi
  fi
done

p_out "application $APPNAME created in folder $FOLDER"
#!/bin/bash
function __keyinsection() {
  local S="${1// /_XX_}"
  local K="$2"
  if [ "$S" != "" ]; then
    K="_CONF_S_${S}_K_$K"
  fi
  echo "$K"
}

BASHC_SECTIONS_AVAILABLE=( )

function bashc.confsections() {
  local i
  for i in "${BASHC_SECTIONS_AVAILABLE[@]}"; do
    echo "$i"
  done
}

function bashc.confsectionsset() {
  local SECTION="$1"
  local KEY="$2"
  local VAL="$3"

  if [ "$SECTION" == "" ]; then return 1; fi
  if [ "$KEY" == "" ]; then return 1; fi
  KEY="$(__keyinsection "$SECTION" "$KEY")"
  read $KEY <<< "$VAL"
}

function bashc.confsectionsget() {
  local SECTION="$1"
  local KEY="$2"

  if [ "$SECTION" == "" ]; then return 1; fi
  if [ "$KEY" == "" ]; then return 1; fi
  KEY="$(__keyinsection "$SECTION" "$KEY")"
  echo "${!KEY}"
}

function bashc.confsectionssetdefault() {
  local SECTION="$1"
  local KEY="$2"
  local DEFVAL="$3"

  if [ "$SECTION" == "" ]; then return 1; fi
  if [ "$KEY" == "" ]; then return 1; fi
  KEY="$(__keyinsection "$SECTION" "$KEY")"

  if [ -z "${!KEY+x}" ]; then
    read $KEY <<< "$DEFVAL"
  fi
  return 0
}

function bashc.readconf() {
  local _TXT_CONF="$1"
  local _CURRENT_KEY _CURRENT_VALUE
  local L
  local _VALID_KEYS=( )
  BASHC_SECTIONS_AVAILABLE=( )

  # Now read the valid keys
  shift
  bashc.list_append _VALID_KEYS "$@"

  local _EXITCODE=0
  local MULTILINE_KEY=
  local MULTILINE_BUFFER=
  local _CURRENT_SECTION=
  # Let's read the lines
  while read L; do
    if [ "$MULTILINE_KEY" != "" ]; then
      MULTILINE_BUFFER="${MULTILINE_BUFFER}\n${L}"
      if [[ "$L" =~ [^\"]*\"[[:blank:]]*$ ]]; then
        _CURRENT_KEY="$MULTILINE_KEY"
        _CURRENT_VALUE="$MULTILINE_BUFFER"
        MULTILINE_KEY=
        MULTILINE_BUFFER=
      else
        continue
      fi
    else
      if [[ "$L" =~ ^[[:blank:]]*\[.*$ ]]; then
        _CURRENT_SECTION="$(bashc.trim "$L")"
        _CURRENT_SECTION="${_CURRENT_SECTION:1:-1}"
        BASHC_SECTIONS_AVAILABLE=( "${BASHC_SECTIONS_AVAILABLE[@]}" "$_CURRENT_SECTION" )
        continue
      fi
      if [[ "$L" =~ ^[[:blank:]]*[A-Za-z_][A-Za-z0-9_]*=\"[^\"]*$ ]]; then
        IFS='=' read _CURRENT_KEY _CURRENT_VALUE <<< "$L"
        MULTILINE_KEY="$_CURRENT_KEY"
        MULTILINE_BUFFER="$_CURRENT_VALUE"
        continue
      else
        if [[ "$L" =~ ^[[:blank:]]*[A-Za-z_][A-Za-z0-9_]*= ]]; then
          IFS='=' read _CURRENT_KEY _CURRENT_VALUE <<< "$L"
        else
          if [ "${L%%\#*}" != "" ]; then
            p_error "invalid configuration line '$L'"
            _EXITCODE=$((_EXITCODE+1))
          fi
        fi
      fi
    fi

    if [ "$_CURRENT_KEY" == "" ]; then
      continue
    fi

    if ((_EXITCODE>=254)); then
      p_error "too errors to consider this file"
      return $_EXITCODE
    fi

    _CURRENT_VALUE="$(bashc.cleanvalue "$_CURRENT_VALUE")"
    if [ $? -ne 0 ]; then
      p_warning "ignoring invalid value $_CURRENT_VALUE for key $_CURRENT_KEY"
      _EXITCODE=$((_EXITCODE+1))
    else
      _CURRENT_VALUE="$(printf "$_CURRENT_VALUE" | envsubst)"
      if [ ${#_VALID_KEYS[@]} -eq 0 ] || bashc.in_list _VALID_KEYS $_CURRENT_KEY; then
        _CURRENT_KEY="$(__keyinsection "$_CURRENT_SECTION" "$_CURRENT_KEY")"
        read -d '\0' "$_CURRENT_KEY" <<< "${_CURRENT_VALUE}"

        # The value is exported so that it is available for the others subprocesses
        export $_CURRENT_KEY
      else
        p_warning "$_CURRENT_KEY ignored"
      fi
      p_debug "$_CURRENT_KEY=$_CURRENT_VALUE"
      _CURRENT_KEY=
      _CURRENT_VALUE=
    fi
  done <<< "$_TXT_CONF"
  return $_EXITCODE
}
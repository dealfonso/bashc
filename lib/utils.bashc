function bashc.trim() {
  shopt -s extglob
  local A="${1##+([[:space:]])}"
  A="${A%%+([[:space:]])}"
  shopt -u extglob
  echo "$A"
}

function bashc.ltrim() {
  shopt -s extglob
  local A="${1##+([[:space:]])}"
  shopt -u extglob
  echo "$A"
}

function bashc.rtrim() {
  shopt -s extglob
  local A="${1%%+([[:space:]])}"
  shopt -u extglob
  echo "$A"
}

function bashc.build_cmdline() {
  local SHCMDLINE=""
  while [ $# -gt 0 ]; do
    if [ "$1" == "|" -o "$1" == "&&" -o "$1" == ">" -o "$1" == ">>" -o "$1" == "2>" -o "$1" == "2>>" -o "$1" == "<" -o "$1" == "<<" ]; then
      SHCMDLINE="${SHCMDLINE} $1"
    else
      SHCMDLINE="${SHCMDLINE} \"$1\""
    fi
    shift
  done
  echo "$SHCMDLINE"
}

function bashc.dump_list() {
  # Usage:
  # bashc.dump_list "${ARRNAME[@]}"
  local n=0
  while [ $# -gt 0 ]; do
    p_debug "$n: $1"
    shift
    n=$((n+1))
  done
}

function bashc.parameters_to_list() {
  # Usage:
  #  bashc.parameters_to_list ARRNAME p1 p2 p3 p4
  # Effect:
  #  ARRNAME
  local AN="$1"
  local n=0
  shift
  eval "$AN=( )"
  while [ $# -gt 0 ]; do
    read ${AN}[$n] <<< "$1"
    n=$((n+1))
    shift
  done
}

function bashc.list_append() {
  # Usage:
  #  bashc.list_append ARRNAME p1 p2 p3 p4
  # Effect:
  #  ARRNAME
  local AN="$1"
  local SIZE=$(eval "echo \${#$AN[@]}")
  local n
  shift
  if bashc.is_int "$SIZE"; then
    n=$SIZE
    while [ $# -gt 0 ]; do
      read ${AN}[$n] <<< "$1"
      n=$((n+1))
      shift
    done
  fi
}

function bashc.in_list() {
  # Usage:
  #  bashc.in_list ARRNAME <elem>
  local AN="$1"
  local SIZE=$(eval "echo \${#$AN[@]}")
  local T n
  if bashc.is_int "$SIZE"; then
    for ((n=0;n<SIZE;n=n+1)); do 
      T="$AN[$n]"
      if [ "${!T}" == "$2" ]; then
        return 0
      fi
    done
  fi
  return 1
}

function bashc.is_int() {
  if [[ "$1" =~ ^[+-]{0,1}[0-9]+$ ]]; then
    return 0
  fi
  return 1
}

function bashc.arrayze_cmd() {
  # This function creates an array of parameters from a commandline. The special
  # function of this function is that sometimes parameters are between quotes and the
  # common space-separation is not valid. This funcion solves the problem of quotes and
  # then a commandline can be invoked as "${ARRAY[@]}"
  local AN="$1"
  local _CMD="$2"
  local R n=0
  while read R; do
    read ${AN}[$n] <<< "$R"
    n=$((n+1))
  done < <(printf "%s\n" "$_CMD" | xargs -n 1 printf "%s\n")
}

function bashc.lines_to_array() {
  local AN="$1"
  local LINES="$2"
  local L
  local n=0
  while read L; do
    read ${AN}[$n] <<< "$L"
    n=$((n+1))
  done <<< "$LINES"
}

function bashc.sanitize() {
  echo "$1" | sed -e 's/\([[\/.*]\|\]\)/\\&/g'
}

function bashc.cleanfile() {
  # This function removes the comments, the starting and trailing whitespaces of lines and removes blank lines o a file
  cat "$1" | sed 's/#.*//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g' | sed '/^$/d'
}
function bashc.trim() {
  shopt -s extglob
  local A="${1##+([[:space:]])}"
  A="${A%%+([[:space:]])}"
  shopt -u extglob
  echo "$A"
}

function bashc.ltrim() {
  shopt -s extglob
  local A="${1##+([[:space:]])}"
  shopt -u extglob
  echo "$A"
}

function bashc.rtrim() {
  shopt -s extglob
  local A="${1%%+([[:space:]])}"
  shopt -u extglob
  echo "$A"
}

function bashc.build_cmdline() {
  local SHCMDLINE=""
  local SPECIAL=( "|" ";" "&" "&&" ">" ">>" "2>" "2>>" "<" "<<" "<<<" "<(" "(" ")" )
  local ISSPECIAL S
  while [ $# -gt 0 ]; do
    ISSPECIAL=
    for S in "${SPECIAL[@]}"; do
      if [ "$1" == "$S" ]; then 
        ISSPECIAL=true
        break
      fi
    done
    if [ "$ISSPECIAL" == "true" ]; then
      SHCMDLINE="${SHCMDLINE} $1"
    else
      SHCMDLINE="${SHCMDLINE} \"$1\""
    fi
    shift
  done
  echo "$SHCMDLINE"
}

function bashc.dump_list() {
  bashc.dump_in_lines "$@"
}

function bashc.parameters_to_list() {
  # Usage:
  #  bashc.parameters_to_list ARRNAME p1 p2 p3 p4
  # Effect:
  #  ARRNAME
  local AN="$1"
  local n=0
  shift
  eval "$AN=( )"
  while [ $# -gt 0 ]; do
    read ${AN}[$n] <<< "$1"
    n=$((n+1))
    shift
  done
}

function bashc.list_append() {
  # Usage:
  #  bashc.list_append ARRNAME p1 p2 p3 p4
  # Effect:
  #  ARRNAME
  local AN="$1"
  local SIZE=$(eval "echo \${#$AN[@]}")
  local n
  shift
  if bashc.is_int "$SIZE"; then
    n=$SIZE
    while [ $# -gt 0 ]; do
      read ${AN}[$n] <<< "$1"
      n=$((n+1))
      shift
    done
  fi
}

function bashc.in_list() {
  # Usage:
  #  bashc.in_list ARRNAME <elem>
  local AN="$1"
  local SIZE=$(eval "echo \${#$AN[@]}")
  local T n
  if bashc.is_int "$SIZE"; then
    for ((n=0;n<SIZE;n=n+1)); do 
      T="$AN[$n]"
      if [ "${!T}" == "$2" ]; then
        return 0
      fi
    done
  fi
  return 1
}

function bashc.is_int() {
  if [[ "$1" =~ ^[+-]{0,1}[0-9]+$ ]]; then
    return 0
  fi
  return 1
}


function bashc.is_unsigned() {
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    return 0
  fi
  return 1
}

function bashc.is_ip() {
  if [[ "$1" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    while read -d "." F; do
      if [ $F -gt 255 ]; then
        return 1
      fi
    done <<< "${1}."
    return 0
  fi
  return 1
}

function bashc.arrayze_cmd() {
  # This function creates an array of parameters from a commandline. The special
  # function of this function is that sometimes parameters are between quotes and the
  # common space-separation is not valid. This funcion solves the problem of quotes and
  # then a commandline can be invoked as "${ARRAY[@]}"
  local AN="$1"
  local _CMD="$2"
  local R n=0
  if [ "$_CMD" == "" ]; then return; fi
  while read R; do
    read ${AN}[$n] <<< "$R"
    n=$((n+1))
  done < <(printf "%s\n" "$_CMD" | xargs -n 1 printf "%s\n")
}

function bashc.lines_to_array() {
  local AN="$1"
  local LINES="$2"
  local n=0
  while read; do
    read ${AN}[$n] <<< "$REPLY"
    n=$((n+1))
  done <<< "$LINES"
}

function bashc.sanitize() {
  echo "$1" | sed -e 's/\\/\\\\/g; s/\//\\\//g; s/&/\\\&/g; s/\./\\\./g'
}

function bashc.cleanfile() {
  # This function removes the comments, the starting and trailing whitespaces of lines and removes blank lines o a file
  cat "$1" | sed 's/#.*//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g' | sed '/^$/d'
}

function bashc.dump_in_lines() {
  # Function that dumps (in the debug messages) a set of parameters, putting each of them in one numbered line.
  #  It is of special interest to dump arrays
  #  * this is a generalized version of bashc.dump_list
  # Usage:
  #  bashc.dump_in_lines "${ARR[@]}"
  local n=0
  while [ $# -gt 0 ]; do
    p_debug "[$n]: $1"
    shift
    n=$((n+1))
  done
}

function bashc.dump_vars() {
  # Function that dumps (in the debug messages) the value of a list of variables
  # Usage:
  #  bashc.dump_vars V1 V2 V3 ...
  while [ $# -gt 0 ]; do
    p_debug "$1=${!1}"
    shift
  done
}

function bashc.expand_ranges() {
  # Function that expands basic ranges in lines. It accepts multiple ranges that may be letters (e.g. [a-z]) or numbers (e.g. [3-5]); even
  #   the reverse order is accepted (e.g. 3-1).
  # 
  # Usage:
  #   bashc.expand_ranges host0[0-4] 
  #     * echoes "host00 host01 host02 host03 host04" (in lines)
  #   bashc.expand_ranges host[0-2][c-a] 
  #     * echoes "host0c host0b host0a host1c host1b host1a host2c host2b host2a" (in lines)
  local NAME="$1"
  local v PATTERN CONTENT L_LIMIT U_LIMIT
  local RANGE="$(echo "$NAME" | grep -o '\[\([0-9]\{1,\}-[0-9]\{1,\}\|[a-z]-[a-z]\|[A-Z]-[A-Z]\)\]' | head -1)"
  if [ "$RANGE" != "" ]; then
    RANGE="${RANGE:1:-1}"
    PATTERN="\[${RANGE}\]"
    p_debug "range detected: $RANGE"
    IFS='-' read L_LIMIT U_LIMIT <<< "$RANGE"
    for v in $(eval "echo {$L_LIMIT..$U_LIMIT}"); do
      CONTENT="${NAME/$PATTERN/$v}"
      bashc.expand_ranges "$CONTENT"
    done
    return 0
  fi
  echo $NAME
  return 1
}
